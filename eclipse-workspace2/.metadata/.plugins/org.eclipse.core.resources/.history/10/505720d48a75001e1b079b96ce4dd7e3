package com.example.demo.service;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.model.Administrator;
import com.example.demo.model.OrderDTO;
import com.example.demo.model.OrderManagement;
import com.example.demo.repository.AdministratorRepository;
import com.example.demo.repository.OrderRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;


@Service
public class OrderService {
	@Autowired
    private  OrderRepository orderRepository;
	@Autowired
    private  AdministratorRepository inventoryRepository;

	/*public void createOrder(OrderDTO orderDTO, Administrator administrator) {
        OrderManagement order = new OrderManagement();
        order.setAdministrator(administrator);
        order.setOrderQuantity(orderDTO.getOrderQuantity());
        order.setOrderDate(orderDTO.getOrderDate());
        orderRepository.save(order);
    }*/
	public void createOrder(OrderDTO orderDTO) {
        Optional<Administrator> optionalMedicine = inventoryRepository.findById(orderDTO.getMedicineId());
        if (optionalMedicine.isPresent()) {
        	Administrator medicine = optionalMedicine.get();
           
            if (orderDTO.getOrderQuantity() <= medicine.getQuantityInStock()) {
                OrderManagement order = new OrderManagement();
                order.setMedicine(medicine);
                order.setOrderQuantity(orderDTO.getOrderQuantity());
                order.setOrderDate(orderDTO.getOrderDate());
                orderRepository.save(order);
                
               
                medicine.setQuantityInStock(medicine.getQuantityInStock() - orderDTO.getOrderQuantity());
                inventoryRepository.save(medicine);
            } else {
                throw new RuntimeException("Insufficient stock for the requested quantity.");
            }
        } else{
            throw new RuntimeException("Medicine with ID " + orderDTO.getMedicineId() + " not found.");
        }
    }
	public String updateOrder(Long orderId, OrderDTO orderDTO) {
		OrderManagement existingOrder = orderRepository.findById(orderId).get();
        existingOrder.setOrderQuantity(orderDTO.getOrderQuantity());
        existingOrder.setOrderDate(orderDTO.getOrderDate());
        orderRepository.save(existingOrder);
        return "Order updated successfully.";
    }

    public 	String cancelOrder(Long orderId) {
        orderRepository.deleteById(orderId);
       return "Order canceled successfully.";
    }

    public List<OrderManagement> getAllOrders() {
    	List<OrderManagement> om=new ArrayList<OrderManagement>();
    	orderRepository.findAll().forEach(om::add);
    	return om;
        
    }
}

