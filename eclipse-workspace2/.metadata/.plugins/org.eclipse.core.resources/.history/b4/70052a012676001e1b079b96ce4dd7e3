package com.example.demo.service;

import com.example.demo.entities.Medicine;
import com.example.demo.entities.MedicineNotFoundException;
import com.example.demo.entities.Order;
import com.example.demo.entities.OrderNotFoundException;
import com.example.demo.repository.OrderRepository;
import com.example.demo.repository.MedicineRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class OrderService {
	@Autowired
    private  OrderRepository orderRepository;
	@Autowired
    private  MedicineRepository medicineRepository;

    @Autowired

    public Iterable<Order> getAllOrders() {
        return orderRepository.findAll();
    }

    public Order getOrderById(Long id) {
        return orderRepository.findById(id).get();
    }

    public Order createOrder(Order order) {
        return orderRepository.save(order);
    }

    public void updateOrder(Long id, Order updatedOrder) throws OrderNotFoundException {
        if (orderRepository.existsById(id)) {
            updatedOrder.setOrderId(id);
            orderRepository.save(updatedOrder);
        }
        else {
        throw new OrderNotFoundException("Order with given id not found.");
        }
    }

    public void deleteOrder(Long id) {
        if (orderRepository.existsById(id)) {
            orderRepository.deleteById(id);
        }
    }

    public void addMedicineToOrder(Long orderId, Long medicineId) {
        Order order1 = orderRepository.findById(orderId).get();
        Medicine medicine1 = medicineRepository.findById(medicineId).get();

        if (order1 !=null && medicine1 !=null) {
            order1.getMedicines().add(medicine1);
            medicine1.getOrders().add(order1);
            orderRepository.save(order1);
            medicineRepository.save(medicine1);
        }else{
            // Handle invalid orderId or medicineId (not found in the database)
            // You can throw an exception or handle it based on your application logic
        	
        }
    }

    public void removeMedicineFromOrder(Long orderId, Long medicineId) {
        Optional<Order> orderOptional = orderRepository.findById(orderId);
        Optional<Medicine> medicineOptional = medicineRepository.findById(medicineId);

        if (orderOptional.isPresent() && medicineOptional.isPresent()) {
            Order order = orderOptional.get();
            Medicine medicine = medicineOptional.get();

            order.getMedicines().remove(medicine);
            medicine.getOrders().remove(order);

            orderRepository.save(order);
            medicineRepository.save(medicine);
        } else {
            // Handle invalid orderId or medicineId (not found in the database)
            // You can throw an exception or handle it based on your application logic
        }
    }
}

