package com.example.demo.service;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.model.Administrator;
import com.example.demo.model.OrderDTO;
import com.example.demo.model.OrderManagement;
import com.example.demo.repository.AdministratorRepository;
import com.example.demo.repository.OrderRepository;

import java.util.List;
import java.util.Optional;

@Service
public class OrderService {
	@Autowired
    private  OrderRepository orderRepository;
	@Autowired
    private  AdministratorRepository inventoryRepository;

	public void createOrder(OrderDTO orderDTO) {
	    List<Administrator> medicines = inventoryRepository.findById(orderDTO.getMedicineId());

	    if (medicines.isEmpty()) {
	        throw new RuntimeException("Medicine with ID " + orderDTO.getMedicineId() + " not found.");
	    }

	    for (Administrator medicine : medicines) {
	        if (orderDTO.getOrderQuantity() <= medicine.getQuantityInStock()) {
	            OrderManagement order = new OrderManagement();
	            order.setMedicine(medicine);
	            order.setOrderQuantity(orderDTO.getOrderQuantity());
	            order.setOrderDate(orderDTO.getOrderDate());
	            orderRepository.save(order);

	            medicine.setQuantityInStock(medicine.getQuantityInStock() - orderDTO.getOrderQuantity());
	            inventoryRepository.save(medicine);
	        } else {
	            throw new RuntimeException("Insufficient stock for the requested quantity for medicine ID " + medicine.getMedicineId() + ".");
	        }
	    }
	}

	public void updateOrder(Long orderId, OrderDTO orderDTO) {
	    List<OrderManagement> orders = orderRepository.findById(orderId);

	    if (orders.isEmpty()) {
	        throw new RuntimeException("Order with ID " + orderId + " not found.");
	    }

	    for (OrderManagement existingOrder : orders) {
	        existingOrder.setOrderQuantity(orderDTO.getOrderQuantity());
	        existingOrder.setOrderDate(orderDTO.getOrderDate());
	        orderRepository.save(existingOrder);
	    }
	}


    public void cancelOrder(Long orderId) {
        orderRepository.deleteById(orderId);
       
    }

    public List<OrderManagement> getAllOrders() {
        List<OrderManagement> od =(List<OrderManagement>) orderRepository.findAll();
        return od;
    }
}

