package com.example.demo.service;

import com.example.demo.entities.Medicine;
import com.example.demo.entities.Order;
import com.example.demo.entities.MedicineNotFoundException;
import com.example.demo.repository.MedicineRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.Set;

@Service
public class MedicineService {
    private final MedicineRepository medicineRepository;

    @Autowired
    public MedicineService(MedicineRepository medicineRepository) {
        this.medicineRepository = medicineRepository;
    }

    public List<Medicine> getAllMedicines() {
        return medicineRepository.findAll();
    }

    public Medicine getMedicineById(Long id) {
        return medicineRepository.findById(id).get();
    }

    public Medicine addMedicine(Medicine medicine) {
        return medicineRepository.save(medicine);
    }

    public void updateMedicine(Long id, Medicine updatedMedicine) throws MedicineNotFoundException {
        if (medicineRepository.existsById(id)) {
            updatedMedicine.setMedicineId(id);
             medicineRepository.save(updatedMedicine);
        }
        else{
        	throw new MedicineNotFoundException("Medicine with given id not found."); 
        }
        
        }
    public void deleteMedicine(Long id) {
        if (medicineRepository.existsById(id)) {
            medicineRepository.deleteById(id);
        }
    }
    public Set<Order> getOrdersForMedicine(Long medicineId) {
        Optional<Medicine> medicineOptional = medicineRepository.findById(medicineId);
 
        if (medicineOptional.isPresent()) {
            Medicine medicine = medicineOptional.get();
            return medicine.getOrders();
        } else {
            // Handle invalid medicineId (not found in the database)
            // You can throw an exception or handle it based on your application logic
            return new HashSet<>(); // Return an empty set if medicine not found
        }
    }
}
    
